# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  node: circleci/node@5.1.0

executors:
  default:
    description: |
      Select the version of Node.js to use. Uses CircleCI's highly cached convenience images built for CI.
      Any available tag from this list can be used: https://hub.docker.com/r/cimg/node/tags
    docker:
      - image: cimg/node:<<parameters.tag>>
    parameters:
      resource_class:
        default: large
        description: Configure the executor resource class
        enum:
          - small
          - medium
          - medium+
          - large
          - xlarge
          - 2xlarge
          - 2xlarge+
        type: enum
      tag:
        default: lts
        description: |
          Pick a specific cimg/node image version tag: https://hub.docker.com/r/cimg/node
        type: string
    resource_class: << parameters.resource_class >>

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs

# jobs:
#   build-nextjs:
#     docker:
#       - image: cimg/node:18.15-browsers
#     steps:
#       - node/run:
#           yarn-run: workspace @foundation/www-nextjs build
jobs:
  custom-run:
    description: |
      Simple drop-in job to run commands for your Node.js application automatically.
    executor:
      name: default
      resource_class: << parameters.resource_class >>
      tag: << parameters.version >>
    parameters:
      app-dir:
        default: ~/project
        description: >-
          Path to the directory containing your package.json file. Not needed if
          package.json lives in the root.
        type: string
      cache-version:
        default: v1
        description: >-
          Change the default cache version if you need to clear the cache for any
          reason.
        type: string
      npm-run:
        default: ''
        description: >-
          The name of the script within your package.json which you would like to
          run.
        type: string
      override-ci-command:
        default: ''
        description: >
          By default, packages will be installed with "npm ci" or "yarn install
          --frozen-lockfile".

          Optionally supply a custom package installation command, with any
          additional flags needed.
        type: string
      pkg-manager:
        default: npm
        description: Select the default node package manager to use.
        enum:
          - npm
          - yarn
          - yarn-berry
        type: enum
      resource_class:
        default: large
        description: Configure the executor resource class
        enum:
          - small
          - medium
          - medium+
          - large
          - xlarge
          - 2xlarge
          - 2xlarge+
        type: enum
      setup:
        default: []
        description: >-
          Provide any optional steps you would like to run prior to installing the
          node dependencies. This is a good place to install global modules.
        type: steps
      teardown:
        default: []
        description: >-
          Provide any optional steps you would like to run prior to installing the
          node dependencies. This is a good place to install global modules.
        type: steps
      version:
        default: lts
        description: >
          Pick a specific cimg/node image version tag:
          https://hub.docker.com/r/cimg/node
        type: string
      yarn-run:
        default: ''
        description: >-
          The name of the script within your package.json which you would like to
          run.
        type: string
    steps:
      - checkout
      - steps: << parameters.setup >>
      - node/install-packages:
          app-dir: <<parameters.app-dir>>
          cache-version: <<parameters.cache-version>>
          override-ci-command: <<parameters.override-ci-command>>
          pkg-manager: <<parameters.pkg-manager>>
      - run:
          command: |-
            if [[ "$ORB_PARAM_PKG_MANAGER" == "npm" ]]; then
                npm run "$ORB_PARAM_NPM_RUN"
            else
                yarn run "$ORB_PARAM_YARN_RUN"
            fi
          environment:
            ORB_PARAM_NPM_RUN: <<parameters.npm-run>>
            ORB_PARAM_PKG_MANAGER: <<parameters.pkg-manager>>
            ORB_PARAM_YARN_RUN: <<parameters.yarn-run>>
          name: Run <<parameters.pkg-manager>> <<parameters.npm-run>>
          working_directory: <<parameters.app-dir>>
      - steps: << parameters.teardown >>

  post-nextjs-stats:
    docker:
      - image: cimg/node:18.15-browsers
    steps:
      - run:
          name: Post Stats to GitHub PR
          command: |
            sudo apt-get install jq

            pr_response=$(curl --location --request GET "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pulls?head=$CIRCLE_PROJECT_USERNAME:$CIRCLE_BRANCH&state=open" \
              -u $GH_USER:$GH_TOKEN)

            if [ $(echo $pr_response | jq length) -eq 0 ]; then
              echo "No PR found to update"
              exit 0
            fi

            pr_comment_url=$(echo $pr_response | jq -r ".[]._links.comments.href")
            curl --location --request POST "$pr_comment_url" \
              -u $GH_USER:$GH_TOKEN \
              --header 'Content-Type: application/json' \
              --data-raw '{
                  "body": "This would be the data to add"
              }'

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build-all-workflow:
    jobs:
      - custom-run:
          version: 18.15.0
          pkg-manager: yarn
          yarn-run: root:build
          teardown:
            - store_artifacts:
                path: ~/project/apps/www-nextjs/.next/analyze/client.json
                destination: client-bundle-analysis.json
      - post-nextjs-stats:
          requires:
            - custom-run
